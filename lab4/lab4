// Parenthesis matcher Turing Machine
// test tapes and checkoff information
 
checkoff "https://6004.mit.edu/ssldocs/6004xassignment.doit" "Lab #4" -363188037

symbols ( ) 0 1 X #

tape test1 (
result1 test1 0

tape test2 )
result1 test2 0

tape test3 ( )
result1 test3 1

tape test4 ) (
result1 test4 0

tape test5 ( ( ( )
result1 test5 0

tape test6 ( ) ( ( ( ) ( ( ( ) ) ( ) ) )
result1 test6 0

tape test7 ( ( ( ( ( ( ) ( ( ) ) ) ) ) ) )
result1 test7 1

states C O L // list of state names, first is starting state

// specify transistions: action state symbol state' write move
//    state = the current state of the FSM
//    symbol = the symbol read from the current cell
//    state' = state on the next cycle 
//    write = symbol to be written into the current cell
//    move = tape movement ("l" = left, "r" = right, "-"=stay put)
// 	
// X marks pairs that have been already found.
//

/**
//    old  R   new   W M
action C   (    C    ( l // Start state, found a (, look for the closing.
action C   )    O    X r // Found the closing! Go look for the open
action C   X    C    X l // Skip any X's
action C   -    L    - r // Looking for closing, we reach the end of tape.
// action C   1    C    1 r 
// action C   0    C    0 r 

action O   (    C    X l // Found an open, look for the next closing.
action O   ) *error* 1 l // Shouldn't happen
action O   - *halt*  0 - //
// action O   0    C    0 r Found a 0. Move left, go to state C again.
// action O   1	O    0 r 
action O   X	O    X r // Disregard the X's

action L   ( *halt*  0 -
action L   X    L    X r
action L   - *halt*  1 -
**/

//    old  R   new   W M
action C   (    C    ( l // Start state, found a (, look for the closing.
action C   )    O    X r // Found the closing! Go look for the open
action C   X    C    X l // Skip any X's
action C   -    L    - r // Looking for closing, we reach the end of tape.
// action C   1    C    1 r 
// action C   0    C    0 r 

action O   (    C    X l // Found an open, look for the next closing.
action O   ) *error* 1 l // Shouldn't happen
action O   - *halt*  0 - //
// action O   0    C    0 r Found a 0. Move left, go to state C again.
// action O   1	O    0 r 
action O   X	O    X r // Disregard the X's

action L   ( *halt*  0 -
action L   X    L    X r
action L   - *halt*  1 -

